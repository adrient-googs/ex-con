{
 "kind": "discovery#restDescription",
 "etag": "\"zZ6SZIrxjkCWan0Pp0n2ulHSaJk/Av3a74_OsYLSJ5JS8bpm1wNBNG4\"",
 "discoveryVersion": "v1",
 "id": "plus:v1whitelisted",
 "name": "plus",
 "version": "v1whitelisted",
 "revision": "20121127",
 "title": "Google+ API",
 "description": "The Google+ API enables developers to build on top of the Google+ platform.",
 "icons": {
  "x16": "http://www.google.com/images/icons/product/gplus-16.png",
  "x32": "http://www.google.com/images/icons/product/gplus-32.png"
 },
 "documentationLink": "https://developers.google.com/+/api/",
 "protocol": "rest",
 "baseUrl": "https://www.googleapis.com/plus/v1whitelisted/",
 "basePath": "/plus/v1whitelisted/",
 "rootUrl": "https://www.googleapis.com/",
 "servicePath": "plus/v1whitelisted/",
 "batchPath": "batch",
 "parameters": {
  "alt": {
   "type": "string",
   "description": "Data format for the response.",
   "default": "json",
   "enum": [
    "json"
   ],
   "enumDescriptions": [
    "Responses with Content-Type of application/json"
   ],
   "location": "query"
  },
  "fields": {
   "type": "string",
   "description": "Selector specifying which fields to include in a partial response.",
   "location": "query"
  },
  "key": {
   "type": "string",
   "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
   "location": "query"
  },
  "oauth_token": {
   "type": "string",
   "description": "OAuth 2.0 token for the current user.",
   "location": "query"
  },
  "prettyPrint": {
   "type": "boolean",
   "description": "Returns response with indentations and line breaks.",
   "default": "true",
   "location": "query"
  },
  "quotaUser": {
   "type": "string",
   "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.",
   "location": "query"
  },
  "userIp": {
   "type": "string",
   "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits.",
   "location": "query"
  }
 },
 "auth": {
  "oauth2": {
   "scopes": {
    "https://www.googleapis.com/auth/plus.me": {
     "description": "Know who you are on Google"
    },
    "https://www.googleapis.com/auth/plus.moments.write": {
     "description": "Send your activity to your private Google+ history"
    },
    "https://www.googleapis.com/auth/plus.profiles.read": {
     "description": "View your own Google+ profile and profiles shared with you"
    },
    "https://www.googleapis.com/auth/userinfo.profile": {
     "description": "View basic information about your account"
    }
   }
  }
 },
 "schemas": {
  "Acl": {
   "id": "Acl",
   "type": "object",
   "properties": {
    "description": {
     "type": "string",
     "description": "Description of the access granted, suitable for display."
    },
    "items": {
     "type": "array",
     "description": "The list of access entries.",
     "items": {
      "$ref": "PlusAclentryResource"
     }
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as a collection of access controls. Value: \"plus#acl\".",
     "default": "plus#acl"
    }
   }
  },
  "Activity": {
   "id": "Activity",
   "type": "object",
   "properties": {
    "access": {
     "$ref": "Acl",
     "description": "Identifies who has access to see this activity."
    },
    "actor": {
     "type": "object",
     "description": "The person who performed this activity.",
     "properties": {
      "displayName": {
       "type": "string",
       "description": "The name of the actor, suitable for display."
      },
      "id": {
       "type": "string",
       "description": "The ID of the actor's person resource."
      },
      "image": {
       "type": "object",
       "description": "The image representation of the actor.",
       "properties": {
        "url": {
         "type": "string",
         "description": "The URL of the actor's profile photo. To re-size the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side."
        }
       }
      },
      "name": {
       "type": "object",
       "description": "An object representation of the individual components of name.",
       "properties": {
        "familyName": {
         "type": "string",
         "description": "The family name (last name) of the actor."
        },
        "givenName": {
         "type": "string",
         "description": "The given name (first name) of the actor."
        }
       }
      },
      "url": {
       "type": "string",
       "description": "The link to the actor's Google profile."
      }
     }
    },
    "address": {
     "type": "string",
     "description": "Street address where this activity occurred."
    },
    "annotation": {
     "type": "string",
     "description": "Additional content added by the person who shared this activity, applicable only when resharing an activity."
    },
    "crosspostSource": {
     "type": "string",
     "description": "If this activity is a crosspost from another system, this property specifies the ID of the original activity."
    },
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "geocode": {
     "type": "string",
     "description": "Latitude and longitude where this activity occurred. Format is latitude followed by longitude, space separated."
    },
    "id": {
     "type": "string",
     "description": "The ID of this activity."
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as an activity. Value: \"plus#activity\".",
     "default": "plus#activity"
    },
    "object": {
     "type": "object",
     "description": "The object of this activity.",
     "properties": {
      "actor": {
       "type": "object",
       "description": "If this activity's object is itself another activity (for example, when a person reshares an activity), this property specifies the original activity's actor.",
       "properties": {
        "displayName": {
         "type": "string",
         "description": "The original actor's name, suitable for display."
        },
        "id": {
         "type": "string",
         "description": "ID of the original actor."
        },
        "image": {
         "type": "object",
         "description": "The image representation of the original actor.",
         "properties": {
          "url": {
           "type": "string",
           "description": "A URL that points to a thumbnail photo of the original actor."
          }
         }
        },
        "url": {
         "type": "string",
         "description": "A link to the original actor's Google profile."
        }
       }
      },
      "attachments": {
       "type": "array",
       "description": "The media objects attached to this activity.",
       "items": {
        "type": "object",
        "properties": {
         "categories": {
          "type": "array",
          "description": "Specifies zero or more categories the attachment belongs to.",
          "items": {
           "type": "object",
           "properties": {
            "label": {
             "type": "string",
             "description": "The category label, suitable for display (e.g. \"album cover\")."
            },
            "schema": {
             "type": "string",
             "description": "Domain of schema, e.g. http://google.com."
            },
            "term": {
             "type": "string",
             "description": "The tag, e.g. album."
            }
           }
          }
         },
         "content": {
          "type": "string",
          "description": "If the attachment is an article, this property contains a snippet of text from the article. It can also include descriptions for other types."
         },
         "displayName": {
          "type": "string",
          "description": "The title of the attachment (such as a photo caption or an article title)."
         },
         "embed": {
          "type": "object",
          "description": "If the attachment is a video, the embeddable link.",
          "properties": {
           "type": {
            "type": "string",
            "description": "Media type of the link."
           },
           "url": {
            "type": "string",
            "description": "URL of the link."
           }
          }
         },
         "fullImage": {
          "type": "object",
          "description": "The full image URL for photo attachments.",
          "properties": {
           "height": {
            "type": "integer",
            "description": "The height, in pixels, of the linked resource.",
            "format": "uint32"
           },
           "type": {
            "type": "string",
            "description": "Media type of the link."
           },
           "url": {
            "type": "string",
            "description": "URL to the image."
           },
           "width": {
            "type": "integer",
            "description": "The width, in pixels, of the linked resource.",
            "format": "uint32"
           }
          }
         },
         "id": {
          "type": "string",
          "description": "The ID of the attachment."
         },
         "image": {
          "type": "object",
          "description": "The preview image for photos or videos.",
          "properties": {
           "height": {
            "type": "integer",
            "description": "The height, in pixels, of the linked resource.",
            "format": "uint32"
           },
           "type": {
            "type": "string",
            "description": "Media type of the link."
           },
           "url": {
            "type": "string",
            "description": "Image url."
           },
           "width": {
            "type": "integer",
            "description": "The width, in pixels, of the linked resource.",
            "format": "uint32"
           }
          }
         },
         "objectType": {
          "type": "string"
         },
         "previewThumbnails": {
          "type": "array",
          "description": "When previewing these are the optional thumbnails for the post. When posting an article, choose one by setting attachment.image.url. If you don't choose one, one will be chosen for you.",
          "items": {
           "type": "object",
           "properties": {
            "url": {
             "type": "string",
             "description": "URL to the thumbnail image."
            }
           }
          }
         },
         "thumbnails": {
          "type": "array",
          "description": "If the attachment is an album, potential additional thumbnails from the album.",
          "items": {
           "type": "object",
           "properties": {
            "description": {
             "type": "string",
             "description": "Potential name of the thumbnail."
            },
            "id": {
             "type": "string",
             "description": "The media-id of the thumbnail."
            },
            "image": {
             "type": "object",
             "description": "Image resource.",
             "properties": {
              "height": {
               "type": "integer",
               "description": "The height, in pixels, of the linked resource.",
               "format": "uint32"
              },
              "type": {
               "type": "string",
               "description": "Media type of the link."
              },
              "url": {
               "type": "string",
               "description": "Image url."
              },
              "width": {
               "type": "integer",
               "description": "The width, in pixels, of the linked resource.",
               "format": "uint32"
              }
             }
            },
            "url": {
             "type": "string",
             "description": "URL to the webpage containing the image."
            }
           }
          }
         },
         "url": {
          "type": "string",
          "description": "The link to the attachment, should be of type text/html."
         }
        }
       }
      },
      "content": {
       "type": "string",
       "description": "The HTML-formatted content, suitable for display."
      },
      "id": {
       "type": "string",
       "description": "The ID of the object. When resharing an activity, this is the ID of the activity being reshared."
      },
      "objectType": {
       "type": "string",
       "description": "The type of the object. Possible values are:  \n- \"note\" - Textual content. \n- \"activity\" - A Google+ activity."
      },
      "originalContent": {
       "type": "string",
       "description": "The content (text) as provided by the author, stored without any HTML formatting. When creating or updating an activity, this value must be supplied as plain text in the request.",
       "annotations": {
        "required": [
         "plus.activities.insert"
        ]
       }
      },
      "plusoners": {
       "type": "object",
       "description": "People who +1'd this activity.",
       "properties": {
        "selfLink": {
         "type": "string",
         "description": "The URL for the collection of people who +1'd this activity."
        },
        "totalItems": {
         "type": "integer",
         "description": "Total number of people who +1'd this activity.",
         "format": "uint32"
        }
       }
      },
      "replies": {
       "type": "object",
       "description": "Comments in reply to this activity.",
       "properties": {
        "selfLink": {
         "type": "string",
         "description": "The URL for the collection of comments in reply to this activity."
        },
        "totalItems": {
         "type": "integer",
         "description": "Total number of comments on this activity.",
         "format": "uint32"
        }
       }
      },
      "resharers": {
       "type": "object",
       "description": "People who reshared this activity.",
       "properties": {
        "selfLink": {
         "type": "string",
         "description": "The URL for the collection of resharers."
        },
        "totalItems": {
         "type": "integer",
         "description": "Total number of people who reshared this activity.",
         "format": "uint32"
        }
       }
      },
      "statusForViewer": {
       "type": "object",
       "description": "Status of the activity as seen by the viewer",
       "properties": {
        "canComment": {
         "type": "boolean",
         "description": "Whether the viewer can comment on the activity."
        },
        "canPlusone": {
         "type": "boolean",
         "description": "Whether the viewer can +1 the activity."
        },
        "isPlusOned": {
         "type": "boolean",
         "description": "Whether the viewer has +1'ed the activity."
        },
        "resharingDisabled": {
         "type": "boolean",
         "description": "Whether reshares are disabled for the activity."
        }
       }
      },
      "url": {
       "type": "string",
       "description": "The URL that points to the linked resource."
      }
     }
    },
    "placeId": {
     "type": "string",
     "description": "ID of the place where this activity occurred."
    },
    "placeName": {
     "type": "string",
     "description": "Name of the place where this activity occurred."
    },
    "provider": {
     "type": "object",
     "description": "The service provider that initially published this activity.",
     "properties": {
      "title": {
       "type": "string",
       "description": "Name of the service provider."
      }
     }
    },
    "published": {
     "type": "string",
     "description": "The time at which this activity was initially published. Formatted as an RFC 3339 timestamp.",
     "format": "date-time"
    },
    "radius": {
     "type": "string",
     "description": "Radius, in meters, of the region where this activity occurred, centered at the latitude and longitude identified in geocode."
    },
    "title": {
     "type": "string",
     "description": "Title of this activity."
    },
    "updated": {
     "type": "string",
     "description": "The time at which this activity was last updated. Formatted as an RFC 3339 timestamp.",
     "format": "date-time"
    },
    "url": {
     "type": "string",
     "description": "The link to this activity."
    },
    "verb": {
     "type": "string",
     "description": "This activity's verb, indicating what action was performed. Possible values are:  \n- \"checkin\" - Check in to a location. \n- \"post\" - Publish content to the stream. \n- \"share\" - Reshare an activity."
    }
   }
  },
  "ActivityFeed": {
   "id": "ActivityFeed",
   "type": "object",
   "properties": {
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "id": {
     "type": "string",
     "description": "The ID of this collection of activities."
    },
    "items": {
     "type": "array",
     "description": "The activities in this page of results.",
     "items": {
      "$ref": "Activity"
     }
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as a collection of activities. Value: \"plus#activityFeed\".",
     "default": "plus#activityFeed"
    },
    "nextLink": {
     "type": "string",
     "description": "Link to the next page of activities."
    },
    "nextPageToken": {
     "type": "string",
     "description": "The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
    },
    "selfLink": {
     "type": "string",
     "description": "Link to this activity resource."
    },
    "title": {
     "type": "string",
     "description": "The title of this collection of activities."
    },
    "updated": {
     "type": "string",
     "description": "The time at which this collection of activities was last updated. Formatted as an RFC 3339 timestamp.",
     "format": "date-time"
    }
   }
  },
  "Audience": {
   "id": "Audience",
   "type": "object",
   "properties": {
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "item": {
     "$ref": "PlusAclentryResource",
     "description": "The access control list entry."
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as an audience. Value: \"plus#audience\".",
     "default": "plus#audience"
    },
    "visibility": {
     "type": "string",
     "description": "The circle members' visibility as chosen by the owner of the circle. This only applies for items with \"item.type\" equals \"circle\". Possible values are:  \n- \"public\" - Members are visible to the public. \n- \"limited\" - Members are visible to a limited audience. \n- \"private\" - Members are visible to the owner only."
    }
   }
  },
  "AudiencesFeed": {
   "id": "AudiencesFeed",
   "type": "object",
   "properties": {
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "items": {
     "type": "array",
     "description": "The audiences in this result.",
     "items": {
      "$ref": "Audience"
     }
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as a collection of audiences. Value: \"plus#audienceFeed\".",
     "default": "plus#audiencesFeed"
    },
    "nextPageToken": {
     "type": "string",
     "description": "The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
    },
    "totalItems": {
     "type": "integer",
     "description": "The total number of acl entries. The number of entries in this response may be smaller due to paging.",
     "format": "int32"
    }
   }
  },
  "Circle": {
   "id": "Circle",
   "type": "object",
   "properties": {
    "description": {
     "type": "string",
     "description": "The description of this circle."
    },
    "displayName": {
     "type": "string",
     "description": "The circle name.",
     "annotations": {
      "required": [
       "plus.circles.insert"
      ]
     }
    },
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "id": {
     "type": "string",
     "description": "The ID of the circle."
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as a circle. Value: \"plus#circle\".",
     "default": "plus#circle"
    },
    "people": {
     "type": "object",
     "description": "The people in this circle.",
     "properties": {
      "totalItems": {
       "type": "integer",
       "description": "The total number of people in this circle.",
       "format": "uint32"
      }
     }
    },
    "selfLink": {
     "type": "string",
     "description": "Link to this circle resource"
    }
   }
  },
  "CircleFeed": {
   "id": "CircleFeed",
   "type": "object",
   "properties": {
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "items": {
     "type": "array",
     "description": "The circles in this page of results.",
     "items": {
      "$ref": "Circle"
     }
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as a collection of circles. Value: \"plus#circleFeed\".",
     "default": "plus#circleFeed"
    },
    "nextLink": {
     "type": "string",
     "description": "Link to the next page of circles."
    },
    "nextPageToken": {
     "type": "string",
     "description": "The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
    },
    "selfLink": {
     "type": "string",
     "description": "Link to this page of circles."
    },
    "title": {
     "type": "string",
     "description": "The title of this list of resources."
    },
    "totalItems": {
     "type": "integer",
     "description": "The total number of circles. The number of circles in this response may be smaller due to paging.",
     "format": "int32"
    }
   }
  },
  "Comment": {
   "id": "Comment",
   "type": "object",
   "properties": {
    "actor": {
     "type": "object",
     "description": "The person who posted this comment.",
     "properties": {
      "displayName": {
       "type": "string",
       "description": "The name of this actor, suitable for display."
      },
      "id": {
       "type": "string",
       "description": "The ID of the actor."
      },
      "image": {
       "type": "object",
       "description": "The image representation of this actor.",
       "properties": {
        "url": {
         "type": "string",
         "description": "The URL of the actor's profile photo. To re-size the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side."
        }
       }
      },
      "url": {
       "type": "string",
       "description": "A link to the person resource for this actor."
      }
     }
    },
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "id": {
     "type": "string",
     "description": "The ID of this comment."
    },
    "inReplyTo": {
     "type": "array",
     "description": "The activity this comment replied to.",
     "items": {
      "type": "object",
      "properties": {
       "id": {
        "type": "string",
        "description": "The ID of the activity."
       },
       "url": {
        "type": "string",
        "description": "The URL of the activity."
       }
      }
     }
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as a comment. Value: \"plus#comment\".",
     "default": "plus#comment"
    },
    "object": {
     "type": "object",
     "description": "The object of this comment.",
     "properties": {
      "content": {
       "type": "string",
       "description": "The HTML-formatted content, suitable for display."
      },
      "objectType": {
       "type": "string",
       "description": "The object type of this comment. Possible values are:  \n- \"comment\" - A comment in reply to an activity.",
       "default": "comment"
      },
      "originalContent": {
       "type": "string",
       "description": "The content (text) as provided by the author, stored without any HTML formatting. When creating or updating a comment, this value must be supplied as plain text in the request.",
       "annotations": {
        "required": [
         "plus.comments.insert"
        ]
       }
      }
     }
    },
    "plusoners": {
     "type": "object",
     "description": "People who +1'd this comment.",
     "properties": {
      "totalItems": {
       "type": "integer",
       "description": "Total number of people who +1'd this comment.",
       "format": "uint32"
      }
     }
    },
    "published": {
     "type": "string",
     "description": "The time at which this comment was initially published. Formatted as an RFC 3339 timestamp.",
     "format": "date-time"
    },
    "selfLink": {
     "type": "string",
     "description": "Link to this comment resource."
    },
    "updated": {
     "type": "string",
     "description": "The time at which this comment was last updated. Formatted as an RFC 3339 timestamp.",
     "format": "date-time"
    },
    "verb": {
     "type": "string",
     "description": "This comment's verb, indicating what action was performed. Possible values are:  \n- \"post\" - Publish content to the stream.",
     "default": "post"
    }
   }
  },
  "CommentFeed": {
   "id": "CommentFeed",
   "type": "object",
   "properties": {
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "id": {
     "type": "string",
     "description": "The ID of this collection of comments."
    },
    "items": {
     "type": "array",
     "description": "The comments in this page of results.",
     "items": {
      "$ref": "Comment"
     }
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as a collection of comments. Value: \"plus#commentFeed\".",
     "default": "plus#commentFeed"
    },
    "nextLink": {
     "type": "string",
     "description": "Link to the next page of activities."
    },
    "nextPageToken": {
     "type": "string",
     "description": "The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
    },
    "title": {
     "type": "string",
     "description": "The title of this collection of comments."
    },
    "updated": {
     "type": "string",
     "description": "The time at which this collection of comments was last updated. Formatted as an RFC 3339 timestamp.",
     "format": "date-time"
    }
   }
  },
  "IsSiteLinked": {
   "id": "IsSiteLinked",
   "type": "object",
   "properties": {
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "id": {
     "type": "string",
     "description": "The id of the pluspage."
    },
    "is_following": {
     "type": "boolean",
     "description": "True if the viewer is currently following the Google+ Page."
    },
    "is_linked_to_page": {
     "type": "boolean",
     "description": "True if a Google+ Page is linked to the queried website."
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource. Value: \"plus#isSiteLinked\".",
     "default": "plus#isSiteLinked"
    }
   }
  },
  "ItemScope": {
   "id": "ItemScope",
   "type": "object",
   "properties": {
    "about": {
     "$ref": "ItemScope",
     "description": "The subject matter of the content."
    },
    "additionalName": {
     "type": "array",
     "description": "An additional name for a Person, can be used for a middle name.",
     "items": {
      "type": "string"
     }
    },
    "address": {
     "$ref": "ItemScope",
     "description": "Postal address."
    },
    "addressCountry": {
     "type": "string",
     "description": "Address country."
    },
    "addressLocality": {
     "type": "string",
     "description": "Address locality."
    },
    "addressRegion": {
     "type": "string",
     "description": "Address region."
    },
    "associated_media": {
     "type": "array",
     "description": "The encoding.",
     "items": {
      "$ref": "ItemScope"
     }
    },
    "attendeeCount": {
     "type": "integer",
     "description": "Number of attendees.",
     "format": "int32"
    },
    "attendees": {
     "type": "array",
     "description": "A person attending the event.",
     "items": {
      "$ref": "ItemScope"
     }
    },
    "audio": {
     "$ref": "ItemScope",
     "description": "From http://schema.org/MusicRecording, the audio file."
    },
    "author": {
     "type": "array",
     "description": "The person who created this scope.",
     "items": {
      "$ref": "ItemScope"
     }
    },
    "bestRating": {
     "type": "string",
     "description": "Best possible rating value."
    },
    "birthDate": {
     "type": "string",
     "description": "Date of birth."
    },
    "byArtist": {
     "$ref": "ItemScope",
     "description": "From http://schema.org/MusicRecording, the artist that performed this recording."
    },
    "caption": {
     "type": "string",
     "description": "The caption for this object."
    },
    "contentSize": {
     "type": "string",
     "description": "File size in (mega/kilo) bytes."
    },
    "contentUrl": {
     "type": "string",
     "description": "Actual bytes of the media object, for example the image file or video file."
    },
    "contributor": {
     "type": "array",
     "description": "The list of contributors for this scope.",
     "items": {
      "$ref": "ItemScope"
     }
    },
    "dateCreated": {
     "type": "string",
     "description": "The date this scope was created."
    },
    "dateModified": {
     "type": "string",
     "description": "The date this scope was last modified."
    },
    "datePublished": {
     "type": "string",
     "description": "The initial date this scope was published."
    },
    "description": {
     "type": "string",
     "description": "The string describing the content of this scope."
    },
    "duration": {
     "type": "string",
     "description": "The duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format."
    },
    "embedUrl": {
     "type": "string",
     "description": "A URL pointing to a player for a specific video. In general, this is the information in the src element of an embed tag and should not be the same as the content of the loc tag."
    },
    "endDate": {
     "type": "string",
     "description": "The end date and time of the event (in ISO 8601 date format)."
    },
    "familyName": {
     "type": "string",
     "description": "Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the Name property."
    },
    "gender": {
     "type": "string",
     "description": "Gender of the person."
    },
    "geo": {
     "$ref": "ItemScope",
     "description": "Geo coordinates."
    },
    "givenName": {
     "type": "string",
     "description": "Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the Name property."
    },
    "height": {
     "type": "string",
     "description": "The height of the media object."
    },
    "id": {
     "type": "string",
     "description": "The id for this item scope."
    },
    "image": {
     "type": "string",
     "description": "A url to the image for this scope."
    },
    "inAlbum": {
     "$ref": "ItemScope",
     "description": "From http://schema.org/MusicRecording, which album a song is in."
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as an itemScope.",
     "default": "plus#itemScope"
    },
    "latitude": {
     "type": "number",
     "description": "Latitude.",
     "format": "double"
    },
    "location": {
     "$ref": "ItemScope",
     "description": "The location of the event or organization."
    },
    "longitude": {
     "type": "number",
     "description": "Longitude.",
     "format": "double"
    },
    "name": {
     "type": "string",
     "description": "The name of this scope."
    },
    "partOfTVSeries": {
     "$ref": "ItemScope",
     "description": "Property of http://schema.org/TVEpisode indicating which series the episode belongs to."
    },
    "performers": {
     "type": "array",
     "description": "The main performer or performers of the event-for example, a presenter, musician, or actor.",
     "items": {
      "$ref": "ItemScope"
     }
    },
    "playerType": {
     "type": "string",
     "description": "Player type required-for example, Flash or Silverlight."
    },
    "postOfficeBoxNumber": {
     "type": "string",
     "description": "Post office box number."
    },
    "postalCode": {
     "type": "string",
     "description": "Postal code."
    },
    "ratingValue": {
     "type": "string",
     "description": "Rating value."
    },
    "reviewRating": {
     "$ref": "ItemScope",
     "description": "Review rating."
    },
    "startDate": {
     "type": "string",
     "description": "The start date and time of the event (in ISO 8601 date format)."
    },
    "streetAddress": {
     "type": "string",
     "description": "Street address."
    },
    "text": {
     "type": "string",
     "description": "Comment text, review text, etc."
    },
    "thumbnail": {
     "$ref": "ItemScope",
     "description": "Thumbnail image for an image or video."
    },
    "thumbnailUrl": {
     "type": "string",
     "description": "A url to a thumbnail image for this scope."
    },
    "tickerSymbol": {
     "type": "string",
     "description": "The exchange traded instrument associated with a Corporation object. The tickerSymbol is expressed as an exchange and an instrument name separated by a space character. For the exchange component of the tickerSymbol attribute, we reccommend using the controlled vocaulary of Market Identifier Codes (MIC) specified in ISO15022."
    },
    "type": {
     "type": "string",
     "description": "The item type."
    },
    "url": {
     "type": "string",
     "description": "A URL for the item upon which the action was performed."
    },
    "width": {
     "type": "string",
     "description": "The width of the media object."
    },
    "worstRating": {
     "type": "string",
     "description": "Worst possible rating value."
    }
   }
  },
  "Media": {
   "id": "Media",
   "type": "object",
   "properties": {
    "albumId": {
     "type": "string",
     "description": "ID of the album to which this media belongs."
    },
    "author": {
     "type": "object",
     "description": "The person who uploaded this media.",
     "properties": {
      "displayName": {
       "type": "string",
       "description": "The author's name."
      },
      "id": {
       "type": "string",
       "description": "ID of the author."
      },
      "image": {
       "type": "object",
       "description": "The author's Google profile image.",
       "properties": {
        "url": {
         "type": "string",
         "description": "The URL of the author's profile photo. To re-size the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side."
        }
       }
      },
      "url": {
       "type": "string",
       "description": "A link to the author's Google profile."
      }
     }
    },
    "displayName": {
     "type": "string",
     "description": "The display name for this media."
    },
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "exif": {
     "type": "object",
     "description": "Exif information of the media item.",
     "properties": {
      "time": {
       "type": "string",
       "description": "The time the media was captured. Formatted as an RFC 3339 timestamp.",
       "format": "date-time"
      }
     }
    },
    "height": {
     "type": "integer",
     "description": "The height in pixels of the original image.",
     "format": "uint32"
    },
    "id": {
     "type": "string",
     "description": "ID of this media."
    },
    "kind": {
     "type": "string",
     "description": "The type of resource.",
     "default": "plus#media"
    },
    "mediaUrl": {
     "type": "string",
     "description": "The URL of this photo or video's still image."
    },
    "published": {
     "type": "string",
     "description": "The time at which this media was uploaded. Formatted as an RFC 3339 timestamp.",
     "format": "date-time"
    },
    "sizeBytes": {
     "type": "string",
     "description": "The size in bytes of this video.",
     "format": "int64"
    },
    "statusForViewer": {
     "type": "object",
     "description": "Status of the media as seen by the viewer",
     "properties": {
      "canComment": {
       "type": "boolean",
       "description": "Whether the viewer can comment on the media."
      },
      "canPlusone": {
       "type": "boolean",
       "description": "Whether the viewer can +1 the media."
      },
      "resharingDisabled": {
       "type": "boolean",
       "description": "Whether reshares are disabled for the media."
      }
     }
    },
    "streams": {
     "type": "array",
     "description": "The list of video streams for this video. There might be several different streams available for a single video, either flash or mpeg, of various sizes",
     "items": {
      "$ref": "Videostream"
     }
    },
    "summary": {
     "type": "string",
     "description": "A description, or caption, for this media."
    },
    "updated": {
     "type": "string",
     "description": "The time at which this media was last updated. This includes changes to media metadata. Formatted as an RFC 3339 timestamp.",
     "format": "date-time"
    },
    "url": {
     "type": "string",
     "description": "The URL for the page that hosts this media."
    },
    "videoDuration": {
     "type": "string",
     "description": "The duration in milliseconds of this video.",
     "format": "int64"
    },
    "videoStatus": {
     "type": "string",
     "description": "The encoding status of this video. Possible values are:  \n- \"PENDING\" - Video not yet processed. \n- \"FAILED\" - Video processing failed. \n- \"READY\" - A single video stream is playable. \n- \"FINAL\" - All video streams are playable."
    },
    "width": {
     "type": "integer",
     "description": "The width in pixels of the original image.",
     "format": "uint32"
    }
   }
  },
  "Moment": {
   "id": "Moment",
   "type": "object",
   "properties": {
    "id": {
     "type": "string",
     "description": "The moment ID."
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as a moment.",
     "default": "plus#moment"
    },
    "result": {
     "$ref": "ItemScope",
     "description": "The object generated by performing the action on the item"
    },
    "startDate": {
     "type": "string",
     "description": "Time stamp of when the action occurred in RFC3339 format.",
     "format": "date-time"
    },
    "target": {
     "$ref": "ItemScope",
     "description": "The object on which the action was performed.",
     "annotations": {
      "required": [
       "plus.moments.insert"
      ]
     }
    },
    "type": {
     "type": "string",
     "description": "The schema.org activity type.",
     "annotations": {
      "required": [
       "plus.moments.insert"
      ]
     }
    }
   }
  },
  "MomentsFeed": {
   "id": "MomentsFeed",
   "type": "object",
   "properties": {
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "items": {
     "type": "array",
     "description": "The moments in this page of results.",
     "items": {
      "$ref": "Moment"
     }
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as a collection of moments. Value: \"plus#momentsFeed\".",
     "default": "plus#momentsFeed"
    },
    "nextLink": {
     "type": "string",
     "description": "Link to the next page of moments."
    },
    "nextPageToken": {
     "type": "string",
     "description": "The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
    },
    "selfLink": {
     "type": "string",
     "description": "Link to this page of moments."
    },
    "title": {
     "type": "string",
     "description": "The title of this collection of moments."
    },
    "updated": {
     "type": "string",
     "description": "The RFC 339 timestamp for when this collection of moments was last updated.",
     "format": "date-time"
    }
   }
  },
  "Notification": {
   "id": "Notification",
   "type": "object",
   "properties": {
    "creation_time": {
     "type": "string",
     "description": "The creation timestamp of the notification, RFC 3339",
     "format": "date-time"
    },
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "id": {
     "type": "string",
     "description": "The ID of the notification."
    },
    "kind": {
     "type": "string",
     "description": "The kind of this object. Value: \"plus#notification",
     "default": "plus#notification"
    },
    "read": {
     "type": "boolean",
     "description": "Has this notification been read (creation time \u003c= lastReadTime)?"
    },
    "type": {
     "type": "string",
     "description": "The type of the notification."
    }
   }
  },
  "NotificationList": {
   "id": "NotificationList",
   "type": "object",
   "properties": {
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "items": {
     "type": "array",
     "description": "The notifications in this page of results.",
     "items": {
      "$ref": "Notification"
     }
    },
    "kind": {
     "type": "string",
     "description": "The kind of this object.",
     "default": "plus#notificationList"
    },
    "lastReadTime": {
     "type": "string",
     "description": "timestamp after which to consider notifications unread, RFC 3339",
     "format": "date-time"
    },
    "nextPageToken": {
     "type": "string",
     "description": "The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
    },
    "unreadCount": {
     "type": "integer",
     "description": "The total number of unread notifications, independent of number displayed in the items list.",
     "format": "int32"
    }
   }
  },
  "PeopleFeed": {
   "id": "PeopleFeed",
   "type": "object",
   "properties": {
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "items": {
     "type": "array",
     "description": "The people in this page of results. Each item includes the id, displayName, image, and url for the person. To retrieve additional profile data, see the people.get method.",
     "items": {
      "$ref": "Person"
     }
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as a collection of people. Value: \"plus#peopleFeed\".",
     "default": "plus#peopleFeed"
    },
    "nextPageToken": {
     "type": "string",
     "description": "The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
    },
    "selfLink": {
     "type": "string",
     "description": "Link to this resource."
    },
    "title": {
     "type": "string",
     "description": "The title of this collection of people."
    },
    "totalItems": {
     "type": "integer",
     "description": "The total number of people available in this list. The number of people in a response might be smaller due to paging. This might not be set for all collections.",
     "format": "int32"
    }
   }
  },
  "Person": {
   "id": "Person",
   "type": "object",
   "properties": {
    "aboutMe": {
     "type": "string",
     "description": "A short biography for this person."
    },
    "ageRange": {
     "type": "string",
     "description": "The age range of the person. Possible values are:  \n- unknown \n- lessThanEighteen \n- twentyOneOrOlder \n- eighteenToTwenty"
    },
    "birthday": {
     "type": "string",
     "description": "The person's date of birth, represented as YYYY-MM-DD."
    },
    "circledByCount": {
     "type": "integer",
     "description": "If a Google+ Page and for followers who are visible, the number of people who have added this page to a circle.",
     "format": "int32"
    },
    "cover": {
     "type": "object",
     "description": "The cover photo content.",
     "properties": {
      "coverInfo": {
       "type": "object",
       "description": "Extra information about the cover photo.",
       "properties": {
        "leftImageOffset": {
         "type": "integer",
         "description": "The difference between the left position of the image cover and the actual displayed cover image. Only valid for BANNER layout.",
         "format": "int32"
        },
        "topImageOffset": {
         "type": "integer",
         "description": "The difference between the top position of the image cover and the actual displayed cover image. Only valid for BANNER layout.",
         "format": "int32"
        }
       }
      },
      "coverPhoto": {
       "type": "object",
       "description": "The person's primary cover image.",
       "properties": {
        "height": {
         "type": "integer",
         "description": "The height to the image.",
         "format": "int32"
        },
        "id": {
         "type": "string",
         "description": "The id to the image."
        },
        "url": {
         "type": "string",
         "description": "The url to the image."
        },
        "width": {
         "type": "integer",
         "description": "The width to the image.",
         "format": "int32"
        }
       }
      },
      "layout": {
       "type": "string",
       "description": "The layout of the cover art. Possible values are:  \n- \"banner\" - One large image banner."
      }
     }
    },
    "currentLocation": {
     "type": "string",
     "description": "The current location for this person."
    },
    "displayName": {
     "type": "string",
     "description": "The name of this person, suitable for display."
    },
    "emails": {
     "type": "array",
     "description": "A list of email addresses for this person.",
     "items": {
      "type": "object",
      "properties": {
       "primary": {
        "type": "boolean",
        "description": "If \"true\", indicates this email address is the person's primary one."
       },
       "type": {
        "type": "string",
        "description": "The type of address. Possible values are:  \n- \"home\" - Home email address. \n- \"work\" - Work email address. \n- \"other\" - Other."
       },
       "value": {
        "type": "string",
        "description": "The email address."
       }
      }
     }
    },
    "etag": {
     "type": "string",
     "description": "ETag of this response for caching purposes."
    },
    "gender": {
     "type": "string",
     "description": "The person's gender. Possible values are:  \n- \"male\" - Male gender. \n- \"female\" - Female gender. \n- \"other\" - Other."
    },
    "hasApp": {
     "type": "boolean",
     "description": "If \"true\", indicates that the person has installed the app that is making the request and has chosen to expose this install state to the caller. A value of \"false\" indicates that the install state cannot be determined (it is either not installed or the person has chosen to keep this information private)."
    },
    "id": {
     "type": "string",
     "description": "The ID of this person."
    },
    "image": {
     "type": "object",
     "description": "The representation of the person's profile photo.",
     "properties": {
      "url": {
       "type": "string",
       "description": "The URL of the person's profile photo. To re-size the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side."
      }
     }
    },
    "isPlusUser": {
     "type": "boolean",
     "description": "Whether this user has signed up for Google+."
    },
    "kind": {
     "type": "string",
     "description": "Identifies this resource as a person. Value: \"plus#person\".",
     "default": "plus#person"
    },
    "language": {
     "type": "string",
     "description": "The user's preferred language for rendering."
    },
    "name": {
     "type": "object",
     "description": "An object representation of the individual components of a person's name.",
     "properties": {
      "familyName": {
       "type": "string",
       "description": "The family name (last name) of this person."
      },
      "formatted": {
       "type": "string",
       "description": "The full name of this person, including middle names, suffixes, etc."
      },
      "givenName": {
       "type": "string",
       "description": "The given name (first name) of this person."
      },
      "honorificPrefix": {
       "type": "string",
       "description": "The honorific prefixes (such as \"Dr.\" or \"Mrs.\") for this person."
      },
      "honorificSuffix": {
       "type": "string",
       "description": "The honorific suffixes (such as \"Jr.\") for this person."
      },
      "middleName": {
       "type": "string",
       "description": "The middle name of this person."
      }
     }
    },
    "nickname": {
     "type": "string",
     "description": "The nickname of this person."
    },
    "objectType": {
     "type": "string",
     "description": "Type of person within Google+. Possible values are:  \n- \"person\" - represents an actual person. \n- \"page\" - represents a page."
    },
    "organizations": {
     "type": "array",
     "description": "A list of current or past organizations with which this person is associated.",
     "items": {
      "type": "object",
      "properties": {
       "department": {
        "type": "string",
        "description": "The department within the organization. Deprecated."
       },
       "description": {
        "type": "string",
        "description": "A short description of the person's role in this organization. Deprecated."
       },
       "endDate": {
        "type": "string",
        "description": "The date the person left this organization."
       },
       "location": {
        "type": "string",
        "description": "The location of this organization. Deprecated."
       },
       "name": {
        "type": "string",
        "description": "The name of the organization."
       },
       "primary": {
        "type": "boolean",
        "description": "If \"true\", indicates this organization is the person's primary one (typically interpreted as current one)."
       },
       "startDate": {
        "type": "string",
        "description": "The date the person joined this organization."
       },
       "title": {
        "type": "string",
        "description": "The person's job title or role within the organization."
       },
       "type": {
        "type": "string",
        "description": "The type of organization. Possible values are:  \n- \"work\" - Work. \n- \"school\" - School."
       }
      }
     }
    },
    "placesLived": {
     "type": "array",
     "description": "A list of places where this person has lived.",
     "items": {
      "type": "object",
      "properties": {
       "primary": {
        "type": "boolean",
        "description": "If \"true\", this place of residence is this person's primary residence."
       },
       "value": {
        "type": "string",
        "description": "A place where this person has lived. For example: \"Seattle, WA\", \"Near Toronto\"."
       }
      }
     }
    },
    "plusOneCount": {
     "type": "integer",
     "description": "If a Google+ Page, the number of people who have +1'ed this page.",
     "format": "int32"
    },
    "relationshipStatus": {
     "type": "string",
     "description": "The person's relationship status. Possible values are:  \n- \"single\" - Person is single. \n- \"in_a_relationship\" - Person is in a relationship. \n- \"engaged\" - Person is engaged. \n- \"married\" - Person is married. \n- \"its_complicated\" - The relationship is complicated. \n- \"open_relationship\" - Person is in an open relationship. \n- \"widowed\" - Person is widowed. \n- \"in_domestic_partnership\" - Person is in a domestic partnership. \n- \"in_civil_union\" - Person is in a civil union."
    },
    "statusForViewer": {
     "type": "object",
     "description": "Status of the person or page as seen by the viewer.",
     "properties": {
      "circles": {
       "type": "array",
       "description": "The viewer's circles to which the person or page belongs. This requires the plus.circles.read scope.",
       "items": {
        "type": "object",
        "properties": {
         "displayName": {
          "type": "string",
          "description": "The name of the circle, suitable for display."
         },
         "id": {
          "type": "string",
          "description": "The ID of the circle."
         }
        }
       }
      }
     }
    },
    "suggestionId": {
     "type": "string",
     "description": "If in the context of a suggestion, this is the suggestion ID (used for diagnostics)."
    },
    "tagline": {
     "type": "string",
     "description": "The brief description (tagline) of this person."
    },
    "url": {
     "type": "string",
     "description": "The URL of this person's profile."
    },
    "urls": {
     "type": "array",
     "description": "A list of URLs for this person.",
     "items": {
      "type": "object",
      "properties": {
       "primary": {
        "type": "boolean",
        "description": "If \"true\", this URL is the person's primary URL."
       },
       "type": {
        "type": "string",
        "description": "The type of URL. Possible values are:  \n- \"home\" - URL for home. \n- \"work\" - URL for work. \n- \"blog\" - URL for blog. \n- \"profile\" - URL for profile. \n- \"other\" - Other."
       },
       "value": {
        "type": "string",
        "description": "The URL value."
       }
      }
     }
    },
    "verified": {
     "type": "boolean",
     "description": "If a Google+ Page, whether it has been verified."
    }
   }
  },
  "PlusAclentryResource": {
   "id": "PlusAclentryResource",
   "type": "object",
   "properties": {
    "displayName": {
     "type": "string",
     "description": "A descriptive name for this entry. Suitable for display."
    },
    "id": {
     "type": "string",
     "description": "The ID of the entry. For entries of type \"person\" or \"circle\", this is the ID of the resource. For other types, this property is not set."
    },
    "type": {
     "type": "string",
     "description": "The type of entry describing to whom access is granted. Possible values are:  \n- \"person\" - Access to an individual. \n- \"circle\" - Access to members of a circle. \n- \"myCircles\" - Access to members of all the person's circles. \n- \"extendedCircles\" - Access to members of everyone in a person's circles, plus all of the people in their circles. \n- \"public\" - Access to anyone on the web."
    }
   }
  },
  "Videostream": {
   "id": "Videostream",
   "type": "object",
   "properties": {
    "height": {
     "type": "integer",
     "description": "The height, in pixels, of the video resource.",
     "format": "int32"
    },
    "type": {
     "type": "string",
     "description": "MIME type of the video stream."
    },
    "url": {
     "type": "string",
     "description": "URL of the video stream."
    },
    "width": {
     "type": "integer",
     "description": "The width, in pixels, of the video resource.",
     "format": "int32"
    }
   }
  }
 },
 "resources": {
  "activities": {
   "methods": {
    "disableComments": {
     "id": "plus.activities.disableComments",
     "path": "activities/{activityId}/disableComments",
     "httpMethod": "POST",
     "description": "Disable comments on an activity so that viewers may not comment.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity for which to disable comments.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "activityId"
     ],
     "response": {
      "$ref": "Activity"
     }
    },
    "enableComments": {
     "id": "plus.activities.enableComments",
     "path": "activities/{activityId}/enableComments",
     "httpMethod": "POST",
     "description": "Enable comments on an activity so that viewers may comment.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity for which to enable comments.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "activityId"
     ],
     "response": {
      "$ref": "Activity"
     }
    },
    "get": {
     "id": "plus.activities.get",
     "path": "activities/{activityId}",
     "httpMethod": "GET",
     "description": "Get an activity.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity to get.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, with authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "activityId"
     ],
     "response": {
      "$ref": "Activity"
     },
     "scopes": [
      "https://www.googleapis.com/auth/plus.me"
     ]
    },
    "insert": {
     "id": "plus.activities.insert",
     "path": "people/{userId}/activities",
     "httpMethod": "POST",
     "description": "Create a new activity for the authenticated user.",
     "parameters": {
      "preview": {
       "type": "boolean",
       "description": "If \"true\", extract the potential media attachments for a url. The response will include all possible attachments for a url, including video, photos, and articles based on the content of the page.",
       "location": "query"
      },
      "userId": {
       "type": "string",
       "description": "The ID of the user to create the activity on behalf of. Its value should be \"me\", to indicate the authenticated user.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId"
     ],
     "request": {
      "$ref": "Activity"
     },
     "response": {
      "$ref": "Activity"
     },
     "scopes": [
      "https://www.googleapis.com/auth/plus.me"
     ],
     "supportsMediaUpload": true,
     "mediaUpload": {
      "accept": [
       "image/*",
       "video/*"
      ],
      "protocols": {
       "simple": {
        "multipart": true,
        "path": "/upload/plus/v1whitelisted/people/{userId}/activities"
       },
       "resumable": {
        "multipart": true,
        "path": "/resumable/upload/plus/v1whitelisted/people/{userId}/activities"
       }
      }
     }
    },
    "list": {
     "id": "plus.activities.list",
     "path": "people/{userId}/activities/{collection}",
     "httpMethod": "GET",
     "description": "List all of the activities in the specified collection for a particular user.",
     "parameters": {
      "collection": {
       "type": "string",
       "description": "The collection of activities to list.",
       "required": true,
       "enum": [
        "hot",
        "public",
        "stream",
        "user"
       ],
       "enumDescriptions": [
        "Activities that are in the \"What's Hot\" stream.",
        "All public activities created by the specified user.",
        "The specified user's stream feed, intended for consumption. This includes activities posted by people that the user is following, and activities in which the user has been mentioned.",
        "All activities created by the specified user that the authenticated user is authorized to view."
       ],
       "location": "path"
      },
      "maxResults": {
       "type": "integer",
       "description": "The maximum number of activities to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.",
       "default": "20",
       "format": "uint32",
       "minimum": "1",
       "maximum": "100",
       "location": "query"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, with authorization checks.",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response.",
       "location": "query"
      },
      "userId": {
       "type": "string",
       "description": "The ID of the user to get activities for. The special value \"me\" can be used to indicate the authenticated user.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId",
      "collection"
     ],
     "response": {
      "$ref": "ActivityFeed"
     },
     "scopes": [
      "https://www.googleapis.com/auth/plus.me"
     ]
    },
    "listByCircle": {
     "id": "plus.activities.listByCircle",
     "path": "circles/{circleId}/activities",
     "httpMethod": "GET",
     "description": "List all of the activities authored by members of the specified circle.",
     "parameters": {
      "circleId": {
       "type": "string",
       "description": "The ID of the circle to get activities for.",
       "required": true,
       "location": "path"
      },
      "maxResults": {
       "type": "integer",
       "description": "The maximum number of activities to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.",
       "format": "uint32",
       "location": "query"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, with authorization checks.",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "circleId"
     ],
     "response": {
      "$ref": "ActivityFeed"
     }
    },
    "mute": {
     "id": "plus.activities.mute",
     "path": "activities/{activityId}/mute",
     "httpMethod": "POST",
     "description": "Mute an activity so that it no longer appears in the user's feed.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity to mute.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "activityId"
     ]
    },
    "patch": {
     "id": "plus.activities.patch",
     "path": "activities/{activityId}",
     "httpMethod": "PATCH",
     "description": "Update the content and attachments of an activity. This method supports patch semantics.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity to update.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, modulo authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "activityId"
     ],
     "request": {
      "$ref": "Activity"
     },
     "response": {
      "$ref": "Activity"
     }
    },
    "plusone": {
     "id": "plus.activities.plusone",
     "path": "activities/{activityId}/plusone",
     "httpMethod": "POST",
     "description": "+1 an activity.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity to +1.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "activityId"
     ],
     "response": {
      "$ref": "Activity"
     }
    },
    "remove": {
     "id": "plus.activities.remove",
     "path": "activities/{activityId}",
     "httpMethod": "DELETE",
     "description": "Delete an activity.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity to delete.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, modulo authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "activityId"
     ]
    },
    "report": {
     "id": "plus.activities.report",
     "path": "activities/{activityId}/report",
     "httpMethod": "POST",
     "description": "Report an activity for abuse.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity to report.",
       "required": true,
       "location": "path"
      },
      "reason": {
       "type": "string",
       "description": "Specifies the reason abuse is being reported.",
       "default": "spam",
       "enum": [
        "copyright",
        "hate",
        "nudity",
        "spam"
       ],
       "enumDescriptions": [
        "The activity contains copyrighted content.",
        "The activity contains hate speech or violence.",
        "The activity contains nudity.",
        "The activity is spam."
       ],
       "location": "query"
      }
     },
     "parameterOrder": [
      "activityId"
     ]
    },
    "search": {
     "id": "plus.activities.search",
     "path": "activities",
     "httpMethod": "GET",
     "description": "Search public activities.",
     "parameters": {
      "language": {
       "type": "string",
       "description": "Specify the preferred language to search with. See search language codes for available values.",
       "default": "en-US",
       "location": "query"
      },
      "maxResults": {
       "type": "integer",
       "description": "The maximum number of activities to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.",
       "default": "10",
       "format": "uint32",
       "minimum": "1",
       "maximum": "20",
       "location": "query"
      },
      "orderBy": {
       "type": "string",
       "description": "Specifies how to order search results.",
       "default": "recent",
       "enum": [
        "best",
        "recent"
       ],
       "enumDescriptions": [
        "Sort activities by relevance to the user, most relevant first.",
        "Sort activities by published date, most recent first."
       ],
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response. This token can be of any length.",
       "location": "query"
      },
      "query": {
       "type": "string",
       "description": "Full-text search query string.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "query"
     ],
     "response": {
      "$ref": "ActivityFeed"
     }
    },
    "unmute": {
     "id": "plus.activities.unmute",
     "path": "activities/{activityId}/unmute",
     "httpMethod": "POST",
     "description": "Unmute an activity so that it may appear in the user's feed.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity to unmute.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "activityId"
     ]
    },
    "unplusone": {
     "id": "plus.activities.unplusone",
     "path": "activities/{activityId}/unplusone",
     "httpMethod": "POST",
     "description": "Remove a +1 from an activity.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity from which to remove the +1.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "activityId"
     ],
     "response": {
      "$ref": "Activity"
     }
    },
    "update": {
     "id": "plus.activities.update",
     "path": "activities/{activityId}",
     "httpMethod": "PUT",
     "description": "Update the content and attachments of an activity.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity to update.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, modulo authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "activityId"
     ],
     "request": {
      "$ref": "Activity"
     },
     "response": {
      "$ref": "Activity"
     }
    }
   }
  },
  "audiences": {
   "methods": {
    "list": {
     "id": "plus.audiences.list",
     "path": "people/{userId}/audiences",
     "httpMethod": "GET",
     "description": "List all of the audiences to which a user can share.",
     "parameters": {
      "maxResults": {
       "type": "integer",
       "description": "The maximum number of circles to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.",
       "default": "20",
       "format": "uint32",
       "minimum": "1",
       "maximum": "100",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response.",
       "location": "query"
      },
      "userId": {
       "type": "string",
       "description": "The ID of the user to get audiences for. The special value \"me\" can be used to indicate the authenticated user.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId"
     ],
     "response": {
      "$ref": "AudiencesFeed"
     },
     "scopes": [
      "https://www.googleapis.com/auth/plus.me"
     ]
    }
   }
  },
  "circles": {
   "methods": {
    "addPeople": {
     "id": "plus.circles.addPeople",
     "path": "circles/{circleId}/people",
     "httpMethod": "PUT",
     "description": "Add a person to a circle. Google+ limits certain circle operations, including the number of circle adds. Learn More.",
     "parameters": {
      "circleId": {
       "type": "string",
       "description": "The ID of the circle to add the person to.",
       "required": true,
       "location": "path"
      },
      "email": {
       "type": "string",
       "description": "Email of the people to add to the circle. Optional, can be repeated.",
       "repeated": true,
       "location": "query"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, modulo authorization checks.",
       "location": "query"
      },
      "userId": {
       "type": "string",
       "description": "IDs of the people to add to the circle. Optional, can be repeated.",
       "repeated": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "circleId"
     ],
     "response": {
      "$ref": "Circle"
     }
    },
    "get": {
     "id": "plus.circles.get",
     "path": "circles/{circleId}",
     "httpMethod": "GET",
     "description": "Get a circle.",
     "parameters": {
      "circleId": {
       "type": "string",
       "description": "The ID of the circle to get.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, with authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "circleId"
     ],
     "response": {
      "$ref": "Circle"
     }
    },
    "insert": {
     "id": "plus.circles.insert",
     "path": "people/{userId}/circles",
     "httpMethod": "POST",
     "description": "Create a new circle for the authenticated user.",
     "parameters": {
      "userId": {
       "type": "string",
       "description": "The ID of the user to create the circle on behalf of. The value \"me\" can be used to indicate the authenticated user.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId"
     ],
     "request": {
      "$ref": "Circle"
     },
     "response": {
      "$ref": "Circle"
     },
     "scopes": [
      "https://www.googleapis.com/auth/plus.me"
     ]
    },
    "list": {
     "id": "plus.circles.list",
     "path": "people/{userId}/circles",
     "httpMethod": "GET",
     "description": "List all of the circles for a user.",
     "parameters": {
      "maxResults": {
       "type": "integer",
       "description": "The maximum number of circles to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.",
       "default": "20",
       "format": "uint32",
       "minimum": "1",
       "maximum": "100",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response.",
       "location": "query"
      },
      "userId": {
       "type": "string",
       "description": "The ID of the user to get circles for. The special value \"me\" can be used to indicate the authenticated user.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId"
     ],
     "response": {
      "$ref": "CircleFeed"
     },
     "scopes": [
      "https://www.googleapis.com/auth/plus.me"
     ]
    },
    "patch": {
     "id": "plus.circles.patch",
     "path": "circles/{circleId}",
     "httpMethod": "PATCH",
     "description": "Update a circle. This method supports patch semantics.",
     "parameters": {
      "circleId": {
       "type": "string",
       "description": "The ID of the circle to update.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, modulo authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "circleId"
     ],
     "request": {
      "$ref": "Circle"
     },
     "response": {
      "$ref": "Circle"
     }
    },
    "remove": {
     "id": "plus.circles.remove",
     "path": "circles/{circleId}",
     "httpMethod": "DELETE",
     "description": "Delete a circle.",
     "parameters": {
      "circleId": {
       "type": "string",
       "description": "The ID of the circle to delete.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, modulo authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "circleId"
     ]
    },
    "removePeople": {
     "id": "plus.circles.removePeople",
     "path": "circles/{circleId}/people",
     "httpMethod": "DELETE",
     "description": "Remove a person from a circle.",
     "parameters": {
      "circleId": {
       "type": "string",
       "description": "The ID of the circle to remove the person from.",
       "required": true,
       "location": "path"
      },
      "email": {
       "type": "string",
       "description": "Email of the people to add to the circle. Optional, can be repeated.",
       "repeated": true,
       "location": "query"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, modulo authorization checks.",
       "location": "query"
      },
      "userId": {
       "type": "string",
       "description": "IDs of the people to remove from the circle. Optional, can be repeated.",
       "repeated": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "circleId"
     ]
    },
    "update": {
     "id": "plus.circles.update",
     "path": "circles/{circleId}",
     "httpMethod": "PUT",
     "description": "Update a circle.",
     "parameters": {
      "circleId": {
       "type": "string",
       "description": "The ID of the circle to update.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, modulo authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "circleId"
     ],
     "request": {
      "$ref": "Circle"
     },
     "response": {
      "$ref": "Circle"
     }
    }
   }
  },
  "comments": {
   "methods": {
    "get": {
     "id": "plus.comments.get",
     "path": "comments/{commentId}",
     "httpMethod": "GET",
     "description": "Get a comment.",
     "parameters": {
      "commentId": {
       "type": "string",
       "description": "The ID of the comment to get.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, modulo authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "commentId"
     ],
     "response": {
      "$ref": "Comment"
     }
    },
    "insert": {
     "id": "plus.comments.insert",
     "path": "activities/{activityId}/comments",
     "httpMethod": "POST",
     "description": "Create a new comment in reply to an activity.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity to reply to.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, modulo authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "activityId"
     ],
     "request": {
      "$ref": "Comment"
     },
     "response": {
      "$ref": "Comment"
     }
    },
    "list": {
     "id": "plus.comments.list",
     "path": "activities/{activityId}/comments",
     "httpMethod": "GET",
     "description": "List all of the comments for an activity.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity to get comments for.",
       "required": true,
       "location": "path"
      },
      "maxResults": {
       "type": "integer",
       "description": "The maximum number of comments to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.",
       "default": "20",
       "format": "uint32",
       "minimum": "0",
       "maximum": "500",
       "location": "query"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, modulo authorization checks.",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response.",
       "location": "query"
      },
      "sortOrder": {
       "type": "string",
       "description": "The order in which to sort the list of comments.",
       "default": "ascending",
       "enum": [
        "ascending",
        "descending"
       ],
       "enumDescriptions": [
        "Sort oldest comments first.",
        "Sort newest comments first."
       ],
       "location": "query"
      }
     },
     "parameterOrder": [
      "activityId"
     ],
     "response": {
      "$ref": "CommentFeed"
     }
    },
    "patch": {
     "id": "plus.comments.patch",
     "path": "comments/{commentId}",
     "httpMethod": "PATCH",
     "description": "Update a comment. This method supports patch semantics.",
     "parameters": {
      "commentId": {
       "type": "string",
       "description": "The ID of the comment to update.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, modulo authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "commentId"
     ],
     "request": {
      "$ref": "Comment"
     },
     "response": {
      "$ref": "Comment"
     }
    },
    "plusone": {
     "id": "plus.comments.plusone",
     "path": "comments/{commentId}/plusone",
     "httpMethod": "POST",
     "description": "+1 a comment.",
     "parameters": {
      "commentId": {
       "type": "string",
       "description": "The ID of the comment to +1.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "commentId"
     ]
    },
    "remove": {
     "id": "plus.comments.remove",
     "path": "comments/{commentId}",
     "httpMethod": "DELETE",
     "description": "Delete a comment.",
     "parameters": {
      "commentId": {
       "type": "string",
       "description": "The ID of the comment to delete.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, with authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "commentId"
     ]
    },
    "report": {
     "id": "plus.comments.report",
     "path": "comments/{commentId}/report",
     "httpMethod": "POST",
     "description": "Report a comment for abuse.",
     "parameters": {
      "commentId": {
       "type": "string",
       "description": "The ID of the comment to report.",
       "required": true,
       "location": "path"
      },
      "reason": {
       "type": "string",
       "description": "Specifies the reason abuse is being reported.",
       "default": "spam",
       "enum": [
        "copyright",
        "hate",
        "nudity",
        "spam"
       ],
       "enumDescriptions": [
        "The activity contains copyrighted content.",
        "The activity contains hate speech or violence.",
        "The activity contains nudity.",
        "The activity is spam."
       ],
       "location": "query"
      }
     },
     "parameterOrder": [
      "commentId"
     ]
    },
    "unplusone": {
     "id": "plus.comments.unplusone",
     "path": "comments/{commentId}/unplusone",
     "httpMethod": "POST",
     "description": "Undo a +1 on a comment.",
     "parameters": {
      "commentId": {
       "type": "string",
       "description": "The ID of the comment to undo the +1 on.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "commentId"
     ]
    },
    "update": {
     "id": "plus.comments.update",
     "path": "comments/{commentId}",
     "httpMethod": "PUT",
     "description": "Update a comment.",
     "parameters": {
      "commentId": {
       "type": "string",
       "description": "The ID of the comment to update.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, modulo authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "commentId"
     ],
     "request": {
      "$ref": "Comment"
     },
     "response": {
      "$ref": "Comment"
     }
    }
   }
  },
  "media": {
   "methods": {
    "get": {
     "id": "plus.media.get",
     "path": "media/{mediaId}",
     "httpMethod": "GET",
     "description": "Get a media item.",
     "parameters": {
      "cropImage": {
       "type": "boolean",
       "description": "Crop the image. mediaUrl will contain a square cropped image with the dimensions of imageSize.",
       "location": "query"
      },
      "download": {
       "type": "boolean",
       "description": "When true mediaUrl contains a downloadable link to the media.",
       "location": "query"
      },
      "imageSize": {
       "type": "integer",
       "description": "The longer of width or height (in pixels) of the image in mediaUrl. The aspect ratio of the image is preserved. If cropImage is true imageSize is the dimensions of the cropped image. The default is 512.",
       "format": "int32",
       "minimum": "1",
       "maximum": "1600",
       "location": "query"
      },
      "mediaId": {
       "type": "string",
       "description": "The ID of the media to get.",
       "required": true,
       "location": "path"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, with authorization checks.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "mediaId"
     ],
     "response": {
      "$ref": "Media"
     },
     "scopes": [
      "https://www.googleapis.com/auth/plus.me"
     ]
    },
    "insert": {
     "id": "plus.media.insert",
     "path": "people/{userId}/media/{collection}",
     "httpMethod": "POST",
     "description": "Add a new media item to an album. The current upload size limitations are 36MB for a photo and 1GB for a video. Uploads will not count against quota if photos are less than 2048 pixels on their longest side or videos are less than 15 minutes in length.",
     "parameters": {
      "collection": {
       "type": "string",
       "required": true,
       "enum": [
        "cloud",
        "instant"
       ],
       "enumDescriptions": [
        "Upload the media to share on Google+.",
        "Upload to the Instant Upload album which is used to sync with your phone or other mobile devices."
       ],
       "location": "path"
      },
      "userId": {
       "type": "string",
       "description": "The ID of the user to create the activity on behalf of.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId",
      "collection"
     ],
     "request": {
      "$ref": "Media"
     },
     "response": {
      "$ref": "Media"
     },
     "supportsMediaUpload": true,
     "mediaUpload": {
      "accept": [
       "image/*",
       "video/*"
      ],
      "protocols": {
       "simple": {
        "multipart": true,
        "path": "/upload/plus/v1whitelisted/people/{userId}/media/{collection}"
       },
       "resumable": {
        "multipart": true,
        "path": "/resumable/upload/plus/v1whitelisted/people/{userId}/media/{collection}"
       }
      }
     }
    }
   }
  },
  "moments": {
   "methods": {
    "insert": {
     "id": "plus.moments.insert",
     "path": "people/{userId}/moments/{collection}",
     "httpMethod": "POST",
     "description": "Record a moment representing a user's activity such as making a purchase or commenting on a blog.",
     "parameters": {
      "collection": {
       "type": "string",
       "description": "The collection to which to write moments.",
       "required": true,
       "enum": [
        "vault"
       ],
       "enumDescriptions": [
        "The default collection for writing new moments."
       ],
       "location": "path"
      },
      "debug": {
       "type": "boolean",
       "description": "Return the moment as written. Should be used only for debugging.",
       "location": "query"
      },
      "userId": {
       "type": "string",
       "description": "The ID of the user to record activities for. The only valid values are \"me\" and the ID of the authenticated user.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId",
      "collection"
     ],
     "request": {
      "$ref": "Moment"
     },
     "response": {
      "$ref": "Moment"
     },
     "scopes": [
      "https://www.googleapis.com/auth/plus.me",
      "https://www.googleapis.com/auth/plus.moments.write"
     ]
    },
    "list": {
     "id": "plus.moments.list",
     "path": "people/{userId}/moments/{collection}",
     "httpMethod": "GET",
     "description": "List all of the moments for a particular user.",
     "parameters": {
      "collection": {
       "type": "string",
       "description": "The collection of moments to list.",
       "required": true,
       "enum": [
        "vault"
       ],
       "enumDescriptions": [
        "All moments created by the requesting application for the authenticated user."
       ],
       "location": "path"
      },
      "maxResults": {
       "type": "integer",
       "description": "The maximum number of moments to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.",
       "default": "20",
       "format": "uint32",
       "minimum": "1",
       "maximum": "100",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response.",
       "location": "query"
      },
      "targetUrl": {
       "type": "string",
       "description": "Only moments containing this targetUrl will be returned.",
       "location": "query"
      },
      "type": {
       "type": "string",
       "description": "Only moments of this type will be returned.",
       "location": "query"
      },
      "userId": {
       "type": "string",
       "description": "The ID of the user to get moments for. The special value \"me\" can be used to indicate the authenticated user.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId",
      "collection"
     ],
     "response": {
      "$ref": "MomentsFeed"
     },
     "scopes": [
      "https://www.googleapis.com/auth/plus.me",
      "https://www.googleapis.com/auth/plus.moments.write"
     ]
    },
    "remove": {
     "id": "plus.moments.remove",
     "path": "moments/{id}",
     "httpMethod": "DELETE",
     "description": "Delete a moment.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The ID of the moment to delete.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "id"
     ],
     "scopes": [
      "https://www.googleapis.com/auth/plus.moments.write"
     ]
    }
   }
  },
  "notifications": {
   "methods": {
    "list": {
     "id": "plus.notifications.list",
     "path": "people/{userId}/notifications/{collection}",
     "httpMethod": "GET",
     "description": "List notifications in the specified collection for a particular user.",
     "parameters": {
      "collection": {
       "type": "string",
       "description": "Choose whether to list all notifications, or a subset of notifications.",
       "required": true,
       "enum": [
        "all",
        "games"
       ],
       "enumDescriptions": [
        "List all notifications. (Notifications are eventually pruned server-side to reclaim storage.)",
        "List game notifications."
       ],
       "location": "path"
      },
      "maxResults": {
       "type": "integer",
       "description": "The maximum number of activities to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.",
       "format": "uint32",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response.",
       "location": "query"
      },
      "userId": {
       "type": "string",
       "description": "The ID of the user for whom to get notifications. The value \"me\" can be used to indicate the authenticated user.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId",
      "collection"
     ],
     "response": {
      "$ref": "NotificationList"
     },
     "scopes": [
      "https://www.googleapis.com/auth/plus.me"
     ]
    }
   }
  },
  "people": {
   "methods": {
    "block": {
     "id": "plus.people.block",
     "path": "people/{userId}/block",
     "httpMethod": "POST",
     "description": "Block a person so that all of the activities and comments from that person will be hidden.",
     "parameters": {
      "userId": {
       "type": "string",
       "description": "The ID of the person to block.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId"
     ]
    },
    "get": {
     "id": "plus.people.get",
     "path": "people/{userId}",
     "httpMethod": "GET",
     "description": "Get a person's profile.",
     "parameters": {
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, with authorization checks.",
       "location": "query"
      },
      "userId": {
       "type": "string",
       "description": "The ID of the person to get the profile for. The special value \"me\" can be used to indicate the authenticated user.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId"
     ],
     "response": {
      "$ref": "Person"
     },
     "scopes": [
      "https://www.googleapis.com/auth/plus.me",
      "https://www.googleapis.com/auth/plus.profiles.read",
      "https://www.googleapis.com/auth/userinfo.profile"
     ]
    },
    "ignore": {
     "id": "plus.people.ignore",
     "path": "people/{userId}/ignore",
     "httpMethod": "POST",
     "description": "DEPRECATED (use people.rejectSuggestion instead). Ignore a person so that they are not suggested to be added to a user's circles.",
     "parameters": {
      "userId": {
       "type": "string",
       "description": "The ID of the person to ignore.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId"
     ]
    },
    "list": {
     "id": "plus.people.list",
     "path": "people/{userId}/people/{collection}",
     "httpMethod": "GET",
     "description": "List all of the people in the specified collection.",
     "parameters": {
      "collection": {
       "type": "string",
       "description": "The collection of people to list.",
       "required": true,
       "enum": [
        "admins",
        "blocked",
        "circled",
        "circledBy",
        "ignored",
        "pages",
        "suggestions",
        "visible"
       ],
       "enumDescriptions": [
        "(Not supported yet.) The list of users who are admins for the Google+ Page. Requires that the user id is the id for a valid Google+ Page.",
        "The list of people that the user has blocked.",
        "The list of people who this user has added to one or more circles.",
        "The list of people who have this user in their circles.",
        "The list of people that the user has ignored.",
        "The list of Google+ Pages the user can act on behalf of.",
        "The list of people Google believes the user may want to add to a circle.",
        "The list of people who this user has added to one or more circles, limited to the circles visible to the requesting application."
       ],
       "location": "path"
      },
      "maxResults": {
       "type": "integer",
       "description": "The maximum number of people to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.",
       "default": "100",
       "format": "uint32",
       "minimum": "1",
       "maximum": "100",
       "location": "query"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, with authorization checks.",
       "location": "query"
      },
      "orderBy": {
       "type": "string",
       "description": "The order to return people in. Only applied to the collection 'circled'.",
       "enum": [
        "alphabetical",
        "best"
       ],
       "enumDescriptions": [
        "Order the people by their display name.",
        "Order people based on the relevence to the viewer."
       ],
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response.",
       "location": "query"
      },
      "userId": {
       "type": "string",
       "description": "Get the collection of people for the person identified by the ID or use \"me\" to indiciated the authenticated user.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId",
      "collection"
     ],
     "response": {
      "$ref": "PeopleFeed"
     },
     "scopes": [
      "https://www.googleapis.com/auth/plus.me"
     ]
    },
    "listByActivity": {
     "id": "plus.people.listByActivity",
     "path": "activities/{activityId}/people/{collection}",
     "httpMethod": "GET",
     "description": "List all of the people in the specified collection for a particular activity.",
     "parameters": {
      "activityId": {
       "type": "string",
       "description": "The ID of the activity to get the list of people for.",
       "required": true,
       "location": "path"
      },
      "collection": {
       "type": "string",
       "description": "The collection of people to list.",
       "required": true,
       "enum": [
        "plusoners",
        "resharers",
        "sharedto"
       ],
       "enumDescriptions": [
        "List all people who have +1'd this activity.",
        "List all people who have reshared this activity.",
        "List all people who this activity was shared to."
       ],
       "location": "path"
      },
      "maxResults": {
       "type": "integer",
       "description": "The maximum number of people to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.",
       "default": "20",
       "format": "uint32",
       "minimum": "1",
       "maximum": "100",
       "location": "query"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The Google+ Page which the user wants to act on behalf of. If set, the action is executed on behalf of the Google+ Page indicated, with authorization checks.",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "activityId",
      "collection"
     ],
     "response": {
      "$ref": "PeopleFeed"
     }
    },
    "listByApplication": {
     "id": "plus.people.listByApplication",
     "path": "applications/{appId}/people/{collection}",
     "httpMethod": "GET",
     "description": "List the top 10 people the viewer knows that also use this application.",
     "parameters": {
      "appId": {
       "type": "string",
       "description": "The ID of the application.",
       "required": true,
       "location": "path"
      },
      "collection": {
       "type": "string",
       "description": "The collection of people to list.",
       "required": true,
       "enum": [
        "connected"
       ],
       "enumDescriptions": [
        "List the top people who the viewer knows that also use this application."
       ],
       "location": "path"
      },
      "fingerprint": {
       "type": "string",
       "description": "The certificate fingerprint for an Android application. Required if using an Android package name as the application ID.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "appId",
      "collection"
     ],
     "response": {
      "$ref": "PeopleFeed"
     },
     "scopes": [
      "https://www.googleapis.com/auth/plus.me"
     ]
    },
    "listByCircle": {
     "id": "plus.people.listByCircle",
     "path": "circles/{circleId}/people",
     "httpMethod": "GET",
     "description": "List all of the people who are members of a circle.",
     "parameters": {
      "circleId": {
       "type": "string",
       "description": "The ID of the circle to get the members of.",
       "required": true,
       "location": "path"
      },
      "maxResults": {
       "type": "integer",
       "description": "The maximum number of people to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.",
       "default": "20",
       "format": "uint32",
       "minimum": "1",
       "maximum": "100",
       "location": "query"
      },
      "onBehalfOf": {
       "type": "string",
       "description": "The +Page which the user wants to act on behalf of. If set, the action is executed on behalf of the +Page indicated, modulo authorization checks.",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "circleId"
     ],
     "response": {
      "$ref": "PeopleFeed"
     }
    },
    "mute": {
     "id": "plus.people.mute",
     "path": "people/{userId}/mute",
     "httpMethod": "POST",
     "description": "Mute notifications from a person.",
     "parameters": {
      "userId": {
       "type": "string",
       "description": "The ID of the person to mute.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId"
     ]
    },
    "rejectSuggestion": {
     "id": "plus.people.rejectSuggestion",
     "path": "people/{userId}/rejectSuggestion",
     "httpMethod": "POST",
     "description": "Reject a person so that they are not suggested to be added to a user's circles.",
     "parameters": {
      "userId": {
       "type": "string",
       "description": "The ID of the person to reject a suggestion for.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId"
     ]
    },
    "search": {
     "id": "plus.people.search",
     "path": "people",
     "httpMethod": "GET",
     "description": "Search all public profiles.",
     "parameters": {
      "language": {
       "type": "string",
       "description": "Specify the preferred language to search with. See search language codes for available values.",
       "default": "en-US",
       "location": "query"
      },
      "maxResults": {
       "type": "integer",
       "description": "The maximum number of people to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.",
       "default": "25",
       "format": "uint32",
       "minimum": "1",
       "maximum": "50",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response. This token can be of any length.",
       "location": "query"
      },
      "query": {
       "type": "string",
       "description": "Specify a query string for full text search of public text in all profiles.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "query"
     ],
     "response": {
      "$ref": "PeopleFeed"
     }
    },
    "unblock": {
     "id": "plus.people.unblock",
     "path": "people/{userId}/unblock",
     "httpMethod": "POST",
     "description": "Unblock a person so that the activities and comments from that person may be displayed.",
     "parameters": {
      "userId": {
       "type": "string",
       "description": "The ID of the person to unblock.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "userId"
     ]
    }
   }
  },
  "rpc": {
   "methods": {
    "isSiteLinked": {
     "id": "plus.rpc.isSiteLinked",
     "path": "rpc/isSiteLinked",
     "httpMethod": "GET",
     "description": "Checks to determine whether a given url is a validated url for a given pluspage. DO NOT USE WITHOUT PRIOR PERMISSION. This method is exclusively for the use of a Chrome Extension.",
     "parameters": {
      "pageUrl": {
       "type": "string",
       "description": "The url of the Google+ page to test.",
       "required": true,
       "location": "query"
      },
      "siteUrl": {
       "type": "string",
       "description": "The url to check for on a given Google+ Page.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "pageUrl",
      "siteUrl"
     ],
     "response": {
      "$ref": "IsSiteLinked"
     }
    }
   }
  }
 }
}