// Generated by CoffeeScript 1.4.0

/*
Useful Utilities
*/


(function() {
  var showDebugColors, util,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  util = util != null ? util : {};

  util.assertion = function(condition, err_msg) {
    if (!condition) {
      alert(err_msg);
      throw new Error(err_msg);
    }
  };

  util.flip = function(func) {
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return func.apply(null, args.slice(0).reverse());
    };
  };

  util.later = function() {
    var args, func, ms, _ref, _ref1;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (args.length === 1) {
      _ref = [args[0], 1], func = _ref[0], ms = _ref[1];
    } else if (args.length === 2) {
      _ref1 = [args[1], args[0]], func = _ref1[0], ms = _ref1[1];
    } else {
      throw new Error('util.later takes 1 or 2 arguments only.');
    }
    return setTimeout(func, ms);
  };

  util.titleCase = function(str) {
    return str.replace(/\w\S*/g, function(txt) {
      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
  };

  util.prettyUsername = function(name) {
    var at_index;
    at_index = name.indexOf('@');
    if (at_index > 0) {
      return name.slice(0, at_index);
    } else {
      return name;
    }
  };

  util.mash = function(array) {
    var dict, key, key_value, value, _i, _len;
    dict = {};
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      key_value = array[_i];
      key = key_value[0], value = key_value[1];
      dict[key] = value;
    }
    return dict;
  };

  util.isInteger = function(obj) {
    return _.isNumber(obj) && (obj % 1 === 0);
  };

  util.typeName = function(obj) {
    if (!(obj != null)) {
      return 'undefined';
    }
    return obj.__proto__.constructor.name;
  };

  util.setCollectionAsAttribute = function(model, collection_name, initial_elts) {
    var collection,
      _this = this;
    if (initial_elts == null) {
      initial_elts = [];
    }
    collection = new Backbone.Collection(initial_elts);
    model[collection_name] = collection;
    model.set(collection_name, collection.models);
    collection.on('add remove change', function() {
      console.log(" --- updating " + (util.typeName(model)) + " based on collection change");
      return model.attributes[collection_name] = collection.models;
    });
    model.on("change:" + collection_name, function() {
      console.log(" --- updating collection based on " + (util.typeName(model)) + " change");
      return collection.reset(model.attributes[collection_name]);
    });
    return collection.on('all', function() {
      var args, type;
      type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return model.trigger.apply(model, ["" + collection_name + ":" + type].concat(__slice.call(args)));
    });
  };

  util.timeStr = function(hour) {
    var suf, _ref;
    if (hour === 12) {
      return 'noon';
    }
    _ref = hour < 12 ? [hour, 'am'] : hour < 13 ? [hour, 'pm'] : [hour - 12, 'pm'], hour = _ref[0], suf = _ref[1];
    if (util.isInteger(hour)) {
      return "" + hour + suf;
    } else {
      return "" + (Math.floor(hour)) + ":30" + suf;
    }
  };

  util.WEEKDAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  util.randInt = function(max) {
    return Math.floor(Math.random() * max);
  };

  util.choose = function(array, exclude) {
    var elt;
    if (exclude == null) {
      exclude = [];
    }
    while (true) {
      elt = array[util.randInt(array.length)];
      if (__indexOf.call(exclude, elt) < 0) {
        return elt;
      }
    }
  };

  util.uid = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r;
      r = util.randInt(16);
      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
    });
  };

  /*
    Performs each action with a given probability, e.g.
  
      util.withProbability [
        0.25, -> action A
        0.50, -> action B
        null, -> action C
      ]
  
    performs action A with probability 0.25, action B with
    probability 0.5 and action C with the remaining 0.25
    probability.
  */


  util.withProbability = function(actions) {
    var action, ii, prob, random, _i, _ref, _ref1;
    random = Math.random();
    for (ii = _i = 0, _ref = actions.length; _i < _ref; ii = _i += 2) {
      _ref1 = actions.slice(ii, +(ii + 1) + 1 || 9e9), prob = _ref1[0], action = _ref1[1];
      if (!(prob != null) || (random -= prob) < 0) {
        return action();
      }
    }
  };

  /*
    Appends an element to a div assuming all elements are laid
    out as follows:
  
      ELT   height
      SPACE vertical_margin
      ELT   height
      SPACE vertical_margin
      ELT   height
  
    Also, resizes the containing div.
  */


  util.verticalAppend = function(elt, container, height, vertical_margin) {
    var n_children;
    n_children = container.children().length;
    elt.css({
      height: height,
      top: n_children * (height + vertical_margin)
    });
    container.css({
      height: height * (n_children + 1) + vertical_margin * n_children
    });
    return container.append(elt);
  };

  $(function() {
    return console.log('We got here. Yeah baby! YEAH!');
  });

  showDebugColors = function() {
    var color, colors, _i, _len, _results;
    colors = ['blue', 'green', 'red', 'yellow', 'purple', 'orange'];
    _results = [];
    for (_i = 0, _len = colors.length; _i < _len; _i++) {
      color = colors[_i];
      _results.push($(".test-" + color).css({
        backgroundColor: color
      }));
    }
    return _results;
  };

}).call(this);
